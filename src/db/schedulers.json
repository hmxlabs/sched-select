[
  {
    "name": "TIBCO DataSynapse GridServer",
    "product": "DataSynapse GridServer",
    "owner": "TIBCO",
    "inScope": 1,
    "score": "100%",
    "link": "https://docs.tibco.com/pub/dsp_gridserver/7.1.0/doc/html/_templates/Home.htm",
    "description": "GridServer Manager is a highly scalable software infrastructure that allows application services to operate in a virtualized fashion, unattached to specific hardware resources.",
    "features": {
      "freeSoftware": false,
      "openSourceSoftware": false,
      "commercialSupport": true,
      "typicalTaskDuration": 2,
      "taskSubmissionRate": 3,
      "microsoftWindowsComputeNodes": true,
      "supportForContainers": true,
      "arm64CPUSupport": false,
      "gpuSupport": false,
      "dataEncrypted": false,
      "advancedResourceScheduling": false,
      "dataAwareScheduling": false,
      "onPremisesScheduler": true,
      "managedCloudResources": false,
      "supportCloudSpotCapacity": false,
      "managedCloudSolution": false,
      "cloudAWSIntegration": false,
      "IntegrationK8": false,
      "advancedCapacityProvisioning": false,
      "cloudAzureIntegration": false,
      "cloudGCPIntegration": false,
      "supportedCloudProviders": [
        "AWS",
        "Azure",
        "GCP"
      ]
    }
  },
  {
    "name": "IBM Spectrum Symphony",
    "product": "Spectrum Symphony",
    "owner": "IBM",
    "inScope": 1,
    "score": "100%",
    "link": "https://www.ibm.com/products/analytics-workload-management",
    "description": "IBM Spectrum Symphony software delivers powerful enterprise-class management for running compute-intensive and data-intensive distributed applications on a scalable, shared grid.",
    "features": {
      "freeSoftware": false,
      "openSourceSoftware": false,
      "commercialSupport": true,
      "typicalTaskDuration": 2,
      "taskSubmissionRate": 3,
      "microsoftWindowsComputeNodes": true,
      "supportForContainers": true,
      "arm64CPUSupport": false,
      "gpuSupport": true,
      "dataEncrypted": false,
      "advancedResourceScheduling": true,
      "dataAwareScheduling": false,
      "onPremisesScheduler": true,
      "managedCloudResources": true,
      "supportCloudSpotCapacity": false,
      "managedCloudSolution": false,
      "cloudAWSIntegration": true,
      "IntegrationK8": false,
      "advancedCapacityProvisioning": false,
      "cloudAzureIntegration": true,
      "cloudGCPIntegration": true,
      "supportedCloudProviders": [
        "AWS",
        "Azure",
        "GCP"
      ]
    }
  },
  {
    "name": "IBM Spectrum LSF",
    "product": "Spectrum LSF",
    "owner": "IBM",
    "inScope": 1,
    "score": "100%",
    "link": "https://www.ibm.com/products/hpc-workload-management",
    "description": "IBM Spectrum LSF Suites is a workload management platform and job scheduler for distributed high performance computing (HPC). A Terraform-based automation to provision and configure resources for an IBM Spectrum LSF based cluster on IBM Cloud® is available.",
    "features": {
      "freeSoftware": false,
      "openSourceSoftware": false,
      "commercialSupport": true,
      "typicalTaskDuration": 2,
      "taskSubmissionRate": 1,
      "microsoftWindowsComputeNodes": true,
      "supportForContainers": false,
      "arm64CPUSupport": false,
      "gpuSupport": false,
      "dataEncrypted": false,
      "advancedResourceScheduling": false,
      "dataAwareScheduling": false,
      "onPremisesScheduler": true,
      "managedCloudResources": false,
      "supportCloudSpotCapacity": false,
      "managedCloudSolution": false,
      "cloudAWSIntegration": false,
      "IntegrationK8": false,
      "advancedCapacityProvisioning": false,
      "cloudAzureIntegration": false,
      "cloudGCPIntegration": false,
      "supportedCloudProviders": [
        "AWS",
        "Azure",
        "GCP"
      ]
    }
  },
  {
    "name": "Yellowdog",
    "product": "Yellowdog",
    "owner": "Yellowdog",
    "inScope": 1,
    "score": "100%",
    "link": "https://yellowdog.ai",
    "description": "YellowDog’s Dynamic Workload Manager specialises in accelerating large-scale, complex, computationally intensive workloads, with rapid scaling and advanced preemption handling to maximise cloud cost/performance, whilst also interworking seamlessly with on-premise resources.",
    "features": {
      "freeSoftware": false,
      "openSourceSoftware": false,
      "commercialSupport": true,
      "typicalTaskDuration": 2,
      "taskSubmissionRate": 3,
      "microsoftWindowsComputeNodes": true,
      "supportForContainers": false,
      "arm64CPUSupport": true,
      "gpuSupport": true,
      "dataEncrypted": false,
      "advancedResourceScheduling": false,
      "dataAwareScheduling": true,
      "onPremisesScheduler": false,
      "managedCloudResources": true,
      "supportCloudSpotCapacity": true,
      "managedCloudSolution": false,
      "cloudAWSIntegration": true,
      "IntegrationK8": false,
      "advancedCapacityProvisioning": true,
      "cloudAzureIntegration": true,
      "cloudGCPIntegration": true,
      "supportedCloudProviders": [
        "AWS",
        "Azure",
        "GCP"
      ]
    }
  },
  {
    "name": "Slurm",
    "product": "Slurm",
    "owner": "SchedMD",
    "inScope": 1,
    "score": "100%",
    "link": "https://www.schedmd.com/slurm/",
    "description": "Slurm’s ability to allocate resources based on time duration makes it the ideal application for HPC job scheduling. In fact, Slurm is used by approximately 65% of supercomputers run by the TOP500.",
    "features": {
      "freeSoftware": true,
      "openSourceSoftware": true,
      "commercialSupport": true,
      "typicalTaskDuration": 1,
      "taskSubmissionRate": 1,
      "microsoftWindowsComputeNodes": true,
      "supportForContainers": false,
      "arm64CPUSupport": true,
      "gpuSupport": true,
      "dataEncrypted": false,
      "advancedResourceScheduling": false,
      "dataAwareScheduling": false,
      "onPremisesScheduler": true,
      "managedCloudResources": false,
      "supportCloudSpotCapacity": false,
      "managedCloudSolution": false,
      "cloudAWSIntegration": false,
      "IntegrationK8": false,
      "advancedCapacityProvisioning": false,
      "cloudAzureIntegration": false,
      "cloudGCPIntegration": false,
      "supportedCloudProviders": [
        "AWS",
        "Azure",
        "GCP"
      ]
    }
  },
  {
    "name": "AWS Parallel Computing Service (Slurm)",
    "product": "PCS",
    "owner": "AWS",
    "inScope": 1,
    "score": "100%",
    "link": "https://www.aws.com/pcs",
    "description": "AWS Parallel Computing Service (AWS PCS) is a managed service that makes it easier for you to run and scale your high performance computing (HPC) workloads and build scientific and engineering models on AWS using Slurm.",
    "features": {
      "freeSoftware": false,
      "openSourceSoftware": false,
      "commercialSupport": true,
      "typicalTaskDuration": 1,
      "taskSubmissionRate": 1,
      "microsoftWindowsComputeNodes": true,
      "supportForContainers": false,
      "arm64CPUSupport": true,
      "gpuSupport": true,
      "dataEncrypted": false,
      "advancedResourceScheduling": false,
      "dataAwareScheduling": false,
      "onPremisesScheduler": false,
      "managedCloudResources": true,
      "supportCloudSpotCapacity": true,
      "managedCloudSolution": true,
      "cloudAWSIntegration": true,
      "IntegrationK8": false,
      "advancedCapacityProvisioning": false,
      "cloudAzureIntegration": false,
      "cloudGCPIntegration": false,
      "supportedCloudProviders": [
        "AWS"
      ]
    },
    "details": {
      "freeSoftware": "AWS PCS is a commerical offering from Amazon Web Services but is based on Slurm.",
      "openSourceSoftware": "AWS PCS is a commerical offering from Amazon Web Services.",
      "commercialSupport": "Commercial support is available for AWS PCS and is dependent on your level of AWS Enterprise support: https://aws.amazon.com/premiumsupport/plans/",
      "typicalTaskDuration": "AWS PCS is not designed for very short, high-throughput use-cases.",
      "taskSubmissionRate": "AWS PCS is not designed for very short, high-throughput use-cases.",
      "microsoftWindowsComputeNodes": "Windows is not currently supported.",
      "supportForContainers": "AWS PCS does not currently have native container support.",
      "arm64CPUSupport": "PCS supports ARM64 workloads: https://docs.aws.amazon.com/pcs/latest/userguide/working-with_cng_create.html",
      "gpuSupport": "GPUs are supported." ,
      "advancedResourceScheduling": "",
      "dataAwareScheduling": "AWS PCS does not allow compute tasks to be directed towards instances with data in place.",
      "onPremisesScheduler": "AWS PCS can only be run in AWS.",
      "managedCloudResources": "AWS PCS can create/remove compute resources as needed",
      "supportCloudSpotCapacity": "AWS PCS supports Spot Instances: https://docs.aws.amazon.com/pcs/latest/userguide/working-with_cng_create.html",
      "managedCloudSolution": "Yes, AWS PCS is a managed solution.",
      "cloudAWSIntegration": "AWS PCS is an AWS servivce",
      "IntegrationK8": "AWS PCS currently leverages AWS EC2 compute planes and does not have native Kubernetes integration.",
      "advancedCapacityProvisioning": "AWS PCS allows you to set your compute requirements.",
      "cloudAzureIntegration": "PCS is not supported on Azure",
      "cloudGCPIntegration": "PCS is not support on GCP"
    }
  },
  {
    "name": "AWS Batch",
    "product": "AWS Batch",
    "owner": "AWS",
    "inScope": 1,
    "score": "100%",
    "link": "https://aws.amazon.com/batch/",
    "description":"AWS Batch is a fully managed batch computing service that plans, schedules, and runs your containerized batch ML, simulation, and analytics workloads across the full range of AWS compute offerings, such as Amazon ECS, Amazon EKS, AWS Fargate, and Spot or On-Demand Instances.",
    "features": {
      "freeSoftware": true,
      "openSourceSoftware": false,
      "commercialSupport": true,
      "typicalTaskDuration": 1,
      "taskSubmissionRate": 1,
      "microsoftWindowsComputeNodes": false,
      "supportForContainers": true,
      "arm64CPUSupport": true,
      "gpuSupport": true,
      "dataEncrypted": false,
      "advancedResourceScheduling": false,
      "dataAwareScheduling": false,
      "onPremisesScheduler": false,
      "managedCloudResources": true,
      "supportCloudSpotCapacity": true,
      "managedCloudSolution": true,
      "cloudAWSIntegration": true,
      "IntegrationK8": true,
      "advancedCapacityProvisioning": false,
      "cloudAzureIntegration": false,
      "cloudGCPIntegration": false,
      "supportedCloudProviders": [
        "AWS"
      ]
    },
    "details": {
      "freeSoftware": "There is no additional charge for AWS Batch. You pay for AWS resources (e.g. EC2 instances, AWS Lambda functions or AWS Fargate) you create to store and run your application.",
      "openSourceSoftware": "AWS Batch is a commerical offering from Amazon Web Services.",
      "commercialSupport": "Commercial support is available for AWS Batch and is dependent on your level of AWS Enterprise support: https://aws.amazon.com/premiumsupport/plans/",
      "typicalTaskDuration": "AWS Batch is not designed for very short, high-throughput use-cases.",
      "taskSubmissionRate": "AWS Batch is not designed for very short, high-throughput use-cases.",
      "microsoftWindowsComputeNodes": "Windows containers are supported but only using Amazon ECS Fargate.",
      "supportForContainers": "AWS Batch supports container/multi-container workloads via ECS, Fargate, and EKS: https://aws.amazon.com/batch/faqs/#topic-0",
      "arm64CPUSupport": "AWS Batch supports both X86_64 and ARM64 vCPU architecture. For Windows container workloads, you must use X86_64. Fargate Spot is not supported for ARM64 and Windows-based containers on Fargate. https://docs.aws.amazon.com/batch/latest/userguide/create-compute-environment.html",
      "gpuSupport": "AWS Batch supports GPU scheduling, but not when using Fargate as your compute environment. You can utilize instances from the p2, p3, p4, p5, g3, g3s, g4, or g5 familes: https://aws.amazon.com/batch/faqs/#topic-5" ,
      "advancedResourceScheduling": "AWS Batch allows different pools of resources to be configured and shared with 'fair share' scheduling.",
      "dataAwareScheduling": "AWS Batch does not allow compute tasks to be directed towards instances with data in place.",
      "onPremisesScheduler": "AWS Batch can only be run in AWS.",
      "managedCloudResources": "AWS Batch can create/remove compute resources as needed",
      "supportCloudSpotCapacity": "AWS Batch supports utilizing Spot Instances: https://aws.amazon.com/batch/faqs/#topic-3",
      "managedCloudSolution": "Yes, AWS Batch is a managed solution.",
      "cloudAWSIntegration": "AWS Batch is an AWS servivce",
      "IntegrationK8": "AWS Batch currently leverages AWS EKS and ECS compute planes.",
      "advancedCapacityProvisioning": "AWS Batch allows you to set your compute requirements.",
      "cloudAzureIntegration": "No Azure implementation has been built.",
      "cloudGCPIntegration": "No GCP implementation has been built."
    }
  },
  {
    "name": "Microsoft HPC Pack",
    "product": "Microsoft HPC Pack",
    "owner": "Microsoft",
    "inScope": 1,
    "score": "100%",
    "link": "https://learn.microsoft.com/en-us/powershell/high-performance-computing/overview-of-microsoft-hpc-pack?view=hpc19-ps",
    "description": "Microsoft HPC Pack brings the power of high-performance computing (HPC) to the commercial mainstream. The centralized management and deployment interface helps to simplify deployment for both large and small compute clusters and provide a simple and effective management experience in order to increase cluster administrator productivity.",
    "features": {
      "freeSoftware": false,
      "openSourceSoftware": false,
      "commercialSupport": true,
      "typicalTaskDuration": 2,
      "taskSubmissionRate": 2,
      "microsoftWindowsComputeNodes": true,
      "supportForContainers": true,
      "arm64CPUSupport": false,
      "gpuSupport": false,
      "dataEncrypted": false,
      "advancedResourceScheduling": false,
      "dataAwareScheduling": false,
      "onPremisesScheduler": false,
      "managedCloudResources": true,
      "supportCloudSpotCapacity": true,
      "managedCloudSolution": false,
      "cloudAWSIntegration": false,
      "IntegrationK8": false,
      "advancedCapacityProvisioning": false,
      "cloudAzureIntegration": true,
      "cloudGCPIntegration": false,
      "supportedCloudProviders": [
        "AWS",
        "Azure",
        "GCP"
      ]
    }
  },
  {
    "name": "HTC-Grid",
    "product": "HTC-Grid",
    "owner": "FINOS",
    "inScope": 1,
    "score": "100%",
    "link": "https://github.com/finos/htc-grid",
    "description": "The high throughput compute grid project (HTC-Grid) is a container based cloud native HPC/Grid environment. The project provides a reference architecture that can be used to build and adapt a modern High throughput compute solution using underlying AWS services, allowing users to submit high volumes of short and long running tasks and scaling environments dynamically.",
    "features": {
      "freeSoftware": true,
      "openSourceSoftware": true,
      "commercialSupport": false,
      "typicalTaskDuration": 2,
      "taskSubmissionRate": 3,
      "microsoftWindowsComputeNodes": false,
      "supportForContainers": true,
      "arm64CPUSupport": false,
      "gpuSupport": false,
      "dataEncrypted": false,
      "advancedResourceScheduling": false,
      "dataAwareScheduling": false,
      "onPremisesScheduler": true,
      "managedCloudResources": false,
      "supportCloudSpotCapacity": false,
      "managedCloudSolution": false,
      "cloudAWSIntegration": true,
      "IntegrationK8": true,
      "advancedCapacityProvisioning": false,
      "cloudAzureIntegration": false,
      "cloudGCPIntegration": false,
      "supportedCloudProviders": [
        "AWS"
      ]
    },
    "details": {
      "freeSoftware": "HTC-Grid is open source software, currently owned by the FINOS foundation and available under the Apache License version 2.0 licence.",
      "openSourceSoftware": "HTC-Grid is open source software, currently owned by the FINOS foundation and available under the Apache License version 2.0 licence.",
      "commercialSupport": "There is currently no commerical support for HTC-Grid",
      "typicalTaskDuration": "HTC-Grid is designed to support short tasks of under 1 seconds and throughputs of thousands of tasks per second. More detail can be found here: https://aws.amazon.com/blogs/hpc/operational-characteristics-of-htc-grid/",
      "taskSubmissionRate": "HTC-Grid has been demonstrated supporting around 30,000 tasks per second in batches of 100.",
      "microsoftWindowsComputeNodes": "Windows compute nodes have not currently been tested but should be possible.",
      "supportForContainers": "The current version of HTC-Grid requires the workers to be packaged as containers",
      "arm64CPUSupport": "Support for ARM64 is possible but is currently untested.",
      "gpuSupport": "Support for GPUs is possible but is currently untested." ,
      "advancedResourceScheduling": "HTC-Grid does not offer advanced scheduling options",
      "dataAwareScheduling": "HTC-Grid does not currently support data-aware scheduling",
      "onPremisesScheduler": "The HTC-Grid control plane is currently dependent on AWS services including Amazon SQS, DynamoDB and Lambda.",
      "managedCloudResources": "",
      "supportCloudSpotCapacity": "This is supported through Amazon EKS.",
      "managedCloudSolution": "No. This is a self-managed open-source solution.",
      "cloudAWSIntegration": "",
      "IntegrationK8": "HTC-Grid currently leverages EKS compute planes.",
      "advancedCapacityProvisioning": "",
      "cloudAzureIntegration": "No Azure implementation has been built.",
      "cloudGCPIntegration": "No GCP implementation has been built."
    }
  },
  {
    "name": "ArmoniK",
    "product": "ArmoniK",
    "owner": "ANEO",
    "inScope": 1,
    "score": "100%",
    "link": "https://www.aneo.eu/en/armonik",
    "features": {
      "freeSoftware": false,
      "openSourceSoftware": false,
      "commercialSupport": true,
      "typicalTaskDuration": 2,
      "taskSubmissionRate": 3,
      "microsoftWindowsComputeNodes": true,
      "supportForContainers": true,
      "arm64CPUSupport": true,
      "gpuSupport": true,
      "dataEncrypted": false,
      "advancedResourceScheduling": true,
      "dataAwareScheduling": true,
      "onPremisesScheduler": true,
      "managedCloudResources": true,
      "supportCloudSpotCapacity": true,
      "managedCloudSolution": false,
      "cloudAWSIntegration": true,
      "IntegrationK8": true,
      "advancedCapacityProvisioning": true,
      "cloudAzureIntegration": false,
      "cloudGCPIntegration": true,
      "supportedCloudProviders": [
        "AWS",
        "GCP"
      ]
    },
    "details": {
      "freeSoftware": "",
      "openSourceSoftware": "",
      "commercialSupport": "",
      "typicalTaskDuration": "ArmoniK can be configured to provide a median roundtrip latency of 38ms. Hence, ArmoniK can easily schedule tasks shorter than 1 second. On the other hands, production deployment often face some tasks that lasts for few hours.",
      "taskSubmissionRate": "Task can be submitted in batches of 100, allowing to submit thousands of tasks per seconds within a single session. Some details can be found on our (incomplete) benchmark page: https://armonik.readthedocs.io/en/latest/content/benchmarking/benchmarking-armonik-v2.12.3.html",
      "microsoftWindowsComputeNodes": "Integration for Windows worker has been developed. It is considered as beta as it hasn't been through extensive testing yet. https://github.com/aneoconsulting/ArmoniK.Core",
      "supportForContainers": "As of today, ArmoniK requires the workers to be packaged as containers",
      "arm64CPUSupport": "Support for ARM64 is in preview. We use it in our every day tests and for demo with our portable Raspberry cluster: https://github.com/aneoconsulting/ArmoniK.Core",
      "gpuSupport": "ArmoniK supports GPU. However, it is the responsibility of the users to manage the GPU code and the data transfer between CPU and GPU. An example of how GPU nodes can be configured can be found here https://github.com/aneoconsulting/ArmoniK/blob/fd6a1ddefd90d14fc34e7f144d58c1b3d61aab53/infrastructure/quick-deploy/aws/parameters.tfvars#L72" ,
      "advancedResourceScheduling": "ArmoniK partitions can be used to provide autoscaling rules for each users. This is done by exposing custom metric that can take into consideration external elements such as cluster occupation, time: https://armonik.readthedocs.io/en/latest/content/armonik/glossary.html#partition",
      "dataAwareScheduling": "ArmoniK jobs are described as graphs of data and tasks. In a Session, data can be shared amongst any tasks. ArmoniK manages data transfer to a worker while the previous task is running (replicating communication-computation overlapping from advanced MPI programming). We recommend that a session should only run on a single distributed ArmoniK environment. An ArmoniK provides a load balancer to distribute session across different ArmoniK environment.",
      "onPremisesScheduler": "ArmoniK can be deployed on any Kubernetes infrastructure. See installation guide.",
      "managedCloudResources": "As of today, ArmoniK relies on managed Kubernetes services to manage cloud resources. Future development will rely on other managed services such as AWS Autoscaling Groups or GCP's Managed Instance Groups to provide the same feature without Kubernetes. ArmoniK leverages Kubernete's Pod Deletion Cost to reduce the likelihood of worker eviction during scaledown phases.",
      "supportCloudSpotCapacity": "Done through Kubernetes machine pool definitions.",
      "managedCloudSolution": "No. Although Market-place deployments are under development.",
      "cloudAWSIntegration": "See installation guide. https://armonik.readthedocs.io/en/latest/content/getting-started/installation/aws.html",
      "IntegrationK8": "ArmoniK relies on EKS.",
      "advancedCapacityProvisioning": "",
      "cloudAzureIntegration": "No specific Azure Integration has been developed yet. However, one can use ArmoniK on Azure using the vanilla Kubernetes deployment.",
      "cloudGCPIntegration": "See installation guide.https://armonik.readthedocs.io/en/latest/content/getting-started/installation/gcp.html"
    }
  },
  {
    "name": "HTCondor",
    "product": "HTCondor",
    "owner": "Center for High Throughput Computing",
    "inScope": 1,
    "score": "100%",
    "link": "https://www.htcondor.org",
    "description": "HTCondor is a workload management system for distributing work across a wide variety of compute resources, from single machines to massive clusters.",
    "features": {
      "freeSoftware": true,
      "openSourceSoftware": true,
      "commercialSupport": true,
      "typicalTaskDuration": 2,
      "taskSubmissionRate": 1,
      "microsoftWindowsComputeNodes": true,
      "supportForContainers": true,
      "arm64CPUSupport": true,
      "gpuSupport": true,
      "dataEncrypted": false,
      "advancedResourceScheduling": true,
      "dataAwareScheduling": true,
      "onPremisesScheduler": true,
      "managedCloudResources": false,
      "supportCloudSpotCapacity": false,
      "managedCloudSolution": false,
      "cloudAWSIntegration": false,
      "IntegrationK8": false,
      "advancedCapacityProvisioning": false,
      "cloudAzureIntegration": false,
      "cloudGCPIntegration": false,
      "supportedCloudProviders": [
        "AWS",
        "GCP"
      ]
    }
  }
]
